/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla XUL Toolkit.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Scott Greenlay <scott@greenlay.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIArray.idl"
#include "nsIDOMWindow.idl"

interface nsIApplescriptWindowCallback;
interface nsIApplescriptTabCallback;

[scriptable, uuid(bc5f5505-86be-41a3-942d-36abda9a85f5)]
interface nsIApplescriptService : nsISupports
{ 
  /**
    * Registers callback for getWindows
    * 
    * @param callback The nsIApplescriptWindowCallback callback.
    */
   void registerWindowCallback(in nsIApplescriptWindowCallback callback);

  /**
    * Registers callback for getTabsForWindow
    * 
    * @param callback The nsIApplescriptTabCallback callback.
    */
   void registerTabCallback(in nsIApplescriptTabCallback callback);
   
   /**
    * Returns an array of nsIXULWindows representing the current
    * windows
    */
   nsIArray getWindows();

  /**
    * Creates a window.
    *
    * @param index The tab's index.
    */
   void createWindowAtIndex(in unsigned long index);

  /**
    * Closes a window (without verification).
    *
    * @param index The tab's index.
    */
   void closeWindowAtIndex(in unsigned long index);
   
   /**
     * Returns an array of nsIDOMWindows representing the tabs in
     * the window at the given index.
     * 
     * @param index The window's index.
     */
    nsIArray getTabsInWindow(in unsigned long index);
    
   /**
     * Returns a nsIDOMWindow representing the current tab in
     * the window at the given index.
     * 
     * @param index The window's index.
     * @param tab_index Returns the tab's index.
     */
    nsIDOMWindow getCurrentTabInWindow(in unsigned long index, out unsigned long tab_index);

  /**
    * Sets the current tab in
    * the window to the given index.
    *
    * @param index The window's index.
    * @param window_index The window's index.
    */
   void setCurrentTabInWindow(in unsigned long index, in unsigned long window_index);

   /**
     * Creates a tab in the window at the given index.
     *
     * @param index The tab's index.
     * @param window_index The window's index.
     */
    void createTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

   /**
     * Closes a tab in the window at the given index.
     *
     * @param index The tab's index.
     * @param window_index The window's index.
     */
    void closeTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

   /**
     * Reloads a tab in the window at the given index.
     *
     * @param index The tab's index.
     * @param window_index The window's index.
     */
    void reloadTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

   /**
     * Returns whether the window is fullscreen.
     *
     * @param index The window's index.
     */
    bool getWindowIsFullScreen(in unsigned long index);

   /**
     * Sets whether the window is fullscreen.
     *
     * @param index The window's index.
     */
    void setWindowIsFullScreen(in unsigned long index, in bool fullscreen);

   /**
    * Returns the result of a JavaScript operation done within this tab's doc.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    * @param script The script to execute.
    * @param result The result, as a string.
    * @return true if the script execution ran without errors
    */
   boolean runScriptInTabAtIndexInWindow(in unsigned long index,
                                         in unsigned long window_index,
                                         in AUTF8String script,
                                         out AUTF8String result);
};

[scriptable, uuid(45f087af-9c24-4fc6-9325-359382196a4e)]
interface nsIApplescriptWindowCallback : nsISupports
{
  /**
    * Returns an array of nsIXULWindows representing the current
    * windows
    */
   nsIArray getWindows();

  /**
    * Creates a window.
    *
    * @param index The window's index.
    */
   void createWindowAtIndex(in unsigned long index);

  /**
    * Closes a window (without verification).
    *
    * @param index The window's index.
    */
   void closeWindowAtIndex(in unsigned long index);

   /**
     * Returns whether the window is fullscreen.
     *
     * @param index The window's index.
     */
    bool getWindowIsFullScreen(in unsigned long index);

   /**
     * Sets whether the window is fullscreen.
     *
     * @param index The window's index.
     */
    void setWindowIsFullScreen(in unsigned long index, in bool fullscreen);
};

[scriptable, uuid(a433c084-ffc7-4264-90fa-82c1e0100b46)]
interface nsIApplescriptTabCallback : nsISupports
{
  /**
    * Returns an array of nsIDOMWindows representing the tabs in
    * the window at the given index.
    * 
    * @param index The window's index.
    */
   nsIArray getTabsInWindow(in unsigned long index);

  /**
    * Returns a nsIDOMWindow representing the current tab in
    * the window at the given index.
    * 
    * @param index The window's index.
    * @param tab_index Returns the tab's index.
    */
   nsIDOMWindow getCurrentTabInWindow(in unsigned long index, out unsigned long tab_index);

  /**
    * Sets the current tab in
    * the window to the given index.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    */
   void setCurrentTabInWindow(in unsigned long index, in unsigned long window_index);

  /**
    * Creates a tab in the window at the given index.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    */
   void createTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

  /**
    * Closes a tab in the window at the given index.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    */
   void closeTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

  /**
    * Reloads a tab in the window at the given index.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    */
   void reloadTabAtIndexInWindow(in unsigned long index, in unsigned long window_index);

   /**
    * Returns the result of a JavaScript operation done within this tab's doc.
    *
    * @param index The tab's index.
    * @param window_index The window's index.
    * @param script The script to execute.
    * @param result The result, as a string.
    * @return true if the script execution ran without errors
    */
   bool runScriptInTabAtIndexInWindow(in unsigned long index,
                                      in unsigned long window_index,
                                      in AUTF8String script,
                                      out AUTF8String result);
};
